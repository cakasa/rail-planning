(define (problem hello6) (:domain domain5)
(:objects
	train1  - slt
	train3  - virm
	train2  - slt
	v1 t1 t2 t3 t4 t5 t6 t7 t8 s1 s2 s3  - trackpart
	track1 track2 track3 track4  - track
)
(:init
	(onPath v1)
	(nextTo v1 s3)
	(nextTo s3 v1)
	(nextTo s3 s2)
	(nextTo s2 s3)
	(nextTo s3 t2)
	(nextTo t2 s3)
	(nextTo s2 s1)
	(nextTo s1 s2)
	(nextTo s2 t4)
	(nextTo t4 s2)
	(nextTo s1 t8)
	(nextTo t8 s1)
	(nextTo s1 t6)
	(nextTo t6 s1)
	(nextTo t8 t7)
	(nextTo t7 t8)
	(nextTo t6 t5)
	(nextTo t5 t6)
	(nextTo t4 t3)
	(nextTo t3 t4)
	(nextTo t2 t1)
	(nextTo t1 t2)
	(free t1)
	(free t2)
	(free t3)
	(free t4)
	(free t5)
	(free t6)
	(free t7)
	(free t8)
	(free s1)
	(switch s1)
	(free s2)
	(switch s2)
	(free s3)
	(switch s3)
	(onTrack t8 track1)
	(onTrack t7 track1)
	(onTrack t6 track2)
	(onTrack t5 track2)
	(onTrack t4 track3)
	(onTrack t3 track3)
	(onTrack t2 track4)
	(onTrack t1 track4)
	(at train1 v1)
	(at train3 v1)
	(at train2 v1)
	(= (timestep) 0)
	(= (cost) 0)
	(= (arrive train1) 0)
	(= (arrive train3) 3)
	(= (arrive train2) 1)
	(= (departed train1) 0)
	(= (departed train3) 0)
	(= (departed train2) 0)
	(= (length train1) 3)
	(= (length train3) 6)
	(= (length train2) 3)
	(= (capacity track1) 8)
	(= (capacity track2) 8)
	(= (capacity track3) 8)
	(= (capacity track4) 8)
)
(:goal (and
	(exists (?t - slt) (= (departed ?t) 2))
	(exists (?t - virm) (= (departed ?t) 4))
	(exists (?t - slt) (= (departed ?t) 5))
	(forall (?t - trainunit) (and (hasBeenParked ?t) (at ?t v1)))
	(<= (timestep) 6)
))
(
	:metric minimize (cost)
)
)