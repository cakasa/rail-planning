(define (problem problem6) (:domain domain2)
(:objects
	train0  - slt
	train1  - slt
	train2  - sng
	v0  t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 s0 s1 s2 s3  - trackpart
	track0 track1 track2 track3 track4 track5  - track
)
(:init
	(= (timestep) 0)
	(nextTo v0 t1)
	(nextTo t1 v0)
	(nextTo t1 s0)
	(nextTo s0 t1)
	(nextTo s0 s2)
	(nextTo s2 s0)
	(nextTo s0 s1)
	(nextTo s1 s0)
	(nextTo s2 s3)
	(nextTo s3 s2)
	(nextTo s2 t2)
	(nextTo t2 s2)
	(nextTo s3 t9)
	(nextTo t9 s3)
	(nextTo s3 t7)
	(nextTo t7 s3)
	(nextTo t9 t3)
	(nextTo t3 t9)
	(nextTo t3 t5)
	(nextTo t5 t3)
	(nextTo t5 t4)
	(nextTo t4 t5)
	(nextTo t7 t6)
	(nextTo t6 t7)
	(nextTo s1 t10)
	(nextTo t10 s1)
	(nextTo s1 t0)
	(nextTo t0 s1)
	(nextTo t10 t8)
	(nextTo t8 t10)
	(free t0)
	(free t1)
	(free t2)
	(free t3)
	(free t4)
	(free t5)
	(free t6)
	(free t7)
	(free t8)
	(free t9)
	(free t10)
	(free s0)
	(switch s0)
	(free s1)
	(switch s1)
	(free s2)
	(switch s2)
	(free s3)
	(switch s3)
	(onTrack t1 track0)
	(onTrack t9 track1)
	(onTrack t3 track1)
	(onTrack t5 track1)
	(onTrack t4 track1)
	(onTrack t7 track2)
	(onTrack t6 track2)
	(onTrack t2 track3)
	(onTrack t10 track4)
	(onTrack t8 track4)
	(onTrack t0 track5)
	(at train0 v0)
	(= (length train0) 3)
	(at train1 v0)
	(= (length train1) 3)
	(at train2 v0)
	(= (length train2) 4)
	(= (arrive train0) 1)
	(= (arrive train1) 3)
	(= (depart train0) 0)
	(= (depart train1) 0)
	(= (depart train2) 0)
)
(:goal (and
	(exists (?t - slt) (and (at ?t v0) (<= (depart ?t) 25) (= (length ?t) 3)))
	(exists (?t - slt) (and (at ?t v0) (<= (depart ?t) 25) (= (length ?t) 3)))
	(exists (?t - sng) (and (at ?t v0) (<= (depart ?t) 25) (= (length ?t) 4)))
	(forall (?t - trainunit) (hasBeenParked ?t))
))
)